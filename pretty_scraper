from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import Select
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from bs4 import BeautifulSoup
import requests
import pandas as pd


def selenium_setup(driver):
    try:
        group = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "group"))
        )
        group.send_keys("122201")
    except:
        driver.quit()

    group_radio = driver.find_element(By.ID, "groupRadio")
    group_radio.click()

    select = Select(driver.find_element(By.NAME, "Week"))
    options = select.options
    return options


def iterating_and_scraping_pages(driver, options, data):
    for i in range(len(options) - 1):
        select = Select(driver.find_element(By.NAME, "Week"))
        select.select_by_index(i)
        button = driver.find_element(By.XPATH, "//input[@value='Покажи']")
        button.click()

        curr_url = driver.current_url

        scrape_process(curr_url, data)

        time.sleep(3)


def dataframe_to_csv(data):
    df = pd.DataFrame(data)
    print(df)
    df.to_csv('test2.csv', sep='\t', encoding='utf-8-sig')


def scrape_process(curr_url, data):
    page = requests.get(curr_url)
    doc = BeautifulSoup(page.content, "html.parser")

    rows = doc.find_all("tr")
    '''Изрязваме ненужните редове'''
    rows = rows[3:-1:1]

    current_date = None
    for row in rows:
        columns = row.find_all("td")

        '''Ако има id за td таг знаем ,че сме на ред с ден от седмицата понеже '''
        if columns[0].attrs.get("id") is not None:
            date = columns[0].string
            current_date = date

        elif columns[0].string == "Няма занятия":
            data["Date"].append(current_date)
            data["Number"].append("Няма занятия")
            data["Hour"].append("")
            data["Discipline"].append("")
            data["Room"].append("")
            data["Teacher"].append("")


        else:
            ''' Добавяме към текущия ден докато current_date не се смени на друг ден '''
            data["Date"].append(current_date)
            if len(columns) == 5:  # Normal rows
                for idx in range(0, 5):
                    columns[idx] = columns[idx].string
                    ''' Ако columns[idx] е NoneTypeObject хвърля грешка при метода replace() '''
                    try:
                        columns[idx] = columns[idx].replace('\n', '')
                        columns[idx] = columns[idx].replace('\t', '')
                    except:
                        columns[idx] = ''

                data["Number"].append(columns[0])
                data["Hour"].append(columns[1])
                data["Discipline"].append(columns[2])
                data["Room"].append(columns[3])
                data["Teacher"].append(columns[4])

            else:  # Defect rows
                data["Number"].append(columns[0].string)
                data["Hour"].append('')
                data["Discipline"].append('')
                data["Room"].append('')
                data["Teacher"].append('')


def main():
    """Driver Set Up"""
    driver_service = Service(executable_path="C:\Program Files (x86)\chromedriver.exe")
    driver = webdriver.Chrome(service=driver_service)
    driver.get("https://nvna.eu/wp/")

    """Data Dictionary Creation"""
    data = {
        "Date": [],
        "Number": [],
        "Hour": [],
        "Discipline": [],
        "Room": [],
        "Teacher": []
    }

    """Selenium First Page Set Up """
    options = selenium_setup(driver)

    """Iterating pages and Scraping """
    iterating_and_scraping_pages(driver, options, data)

    """From dictionary data --> panda dataframe --> csv file"""
    dataframe_to_csv(data)


if __name__ == '__main__':
    main()
